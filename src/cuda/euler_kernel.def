/*  Copyright (c) 2011-2019 INGV, EDF, UniCT, JHU

    Istituto Nazionale di Geofisica e Vulcanologia, Sezione di Catania, Italy
    Électricité de France, Paris, France
    Università di Catania, Catania, Italy
    Johns Hopkins University, Baltimore (MD), USA

    This file is part of GPUSPH. Project founders:
        Alexis Hérault, Giuseppe Bilotta, Robert A. Dalrymple,
        Eugenio Rustico, Ciro Del Negro
    For a full list of authors and project partners, consult the logs
    and the project website <https://www.gpusph.org>

    GPUSPH is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    GPUSPH is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GPUSPH.  If not, see <http://www.gnu.org/licenses/>.
 */


struct common_euler_particle_data
{
	const	uint	index;
	const	particleinfo	info;
	const	ParticleType	ptype;
	const	float4	force;
	const	int3	gridPos; // this is only needed for moving objects, actually
	float4	pos;
	float4	vel;
	float4	velc;

	__device__ __forceinline__
	common_euler_particle_data(const uint _index, common_euler_params params) :
		index(_index),
		info(params.info[index]),
		ptype(static_cast<ParticleType>(PART_TYPE(info))),
		force(params.forces[index]),
		gridPos(calcGridPosFromParticleHash(params.particleHash[index])),
		pos(params.oldPos[index]),
		vel(params.oldVel[index])
	{}
};

struct euler_vel_particle_data
{
	float4	eulerVel;

	__device__ __forceinline__
	euler_vel_particle_data(const uint index, EulerVel_params<> const& params) :
		eulerVel(params.oldEulerVel[index])
	{}
};

struct xsph_particle_data
{
	float4	xsph;

	__device__ __forceinline__
	xsph_particle_data(const uint index, xsph_euler_params params) :
		xsph(params.xsph[index])
	{}
};

struct keps_particle_data
{
	float	keps_k;
	float	keps_e;

	__device__ __forceinline__
	keps_particle_data(const uint index, keps_euler_params params) :
		keps_k(params.oldTKE[index]),
		keps_e(params.oldEps[index])
	{}
};

struct grenier_particle_data
{
	float4	vol;

	__device__ __forceinline__
	grenier_particle_data(const uint index, Vol_params<> const& params) :
		vol(params.oldVol[index])
	{}
};

struct energy_particle_data
{
	float energy;

	__device__ __forceinline__
	energy_particle_data(const uint index, energy_euler_params const& params)  :
		energy(params.oldEnergy[index])
	{}
};

/// The actual euler_particle_data struct, which concatenates all of the above, as appropriate.
template<typename EP, ///< euler_param template specialization
	KernelType _kerneltype = EP::kerneltype,
	SPHFormulation _sph_formulation = EP::sph_formulation,
	BoundaryType _boundarytype = EP::boundarytype,
	//typename _ViscSpec = typename EP::ViscSpec,
	flag_t _simflags = EP::simflags,
	//bool _has_keps = _ViscSpec::turbmodel == KEPSILON && ! EP::repacking,
	bool _has_eulerVel = EP::has_eulerVel>
struct euler_particle_data :
	common_euler_particle_data,
	COND_STRUCT(_has_eulerVel, euler_vel_particle_data),
	//COND_STRUCT(_has_keps, keps_particle_data),
	COND_STRUCT(_simflags & ENABLE_XSPH && !EP::repacking, xsph_particle_data),
	COND_STRUCT(_sph_formulation == SPH_GRENIER && !EP::repacking, grenier_particle_data),
	COND_STRUCT(_simflags & ENABLE_INTERNAL_ENERGY, energy_particle_data)
{
	static const KernelType kerneltype = _kerneltype;
	static const SPHFormulation sph_formulation = _sph_formulation;
	static const BoundaryType boundarytype = _boundarytype;
	//using ViscSpec = _ViscSpec;
	static const flag_t simflags = _simflags;
	//static const bool has_keps = _has_keps;
	static const bool has_eulerVel = _has_eulerVel;

	// shorthand for the type of the euler params
	typedef EP params_t;

	// determine specialization automatically based on info and params
	__device__ __forceinline__
	euler_particle_data(const uint _index, params_t const& params) :
		common_euler_particle_data(_index, params),
		COND_STRUCT(has_eulerVel, euler_vel_particle_data)(_index, params),
		//COND_STRUCT(has_keps, keps_particle_data)(_index, params),
		COND_STRUCT(simflags & ENABLE_XSPH && !EP::repacking, xsph_particle_data)(_index, params),
		COND_STRUCT(sph_formulation == SPH_GRENIER && !EP::repacking, grenier_particle_data)(_index, params),
		COND_STRUCT(simflags & ENABLE_INTERNAL_ENERGY, energy_particle_data)(_index, params)
	{}
};

/// Compute corrected velocity
/*! Takes into account the mean velocity in the XSPH case
 */
template<typename EP, typename P>
__device__ __forceinline__
void
standard_corrected_velocity(EP const& params, P &pdata)
{
	pdata.velc = pdata.vel;

	/* TODO: the order of the multiplication and division
	 * has been chosen purely to ensure consistency with the results
	 * from when we had separate full_dt and half_dt members in params.
	 * In the future we should reevaluate them in terms of accuracy.
	 * TODO also verify if precomputing half_dt again on host is worth it.
	 */
	if (EP::step == 2)
		pdata.velc += pdata.force*(params.dt/2);
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<not (EP::simflags & ENABLE_XSPH) || EP::repacking>
compute_corrected_velocity(EP const& params, P &pdata)
{
	standard_corrected_velocity(params, pdata);
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<(EP::simflags & ENABLE_XSPH) && !EP::repacking>
compute_corrected_velocity(EP const& params, P &pdata)
{
	standard_corrected_velocity(params, pdata);
	/* XSPH correction */
	pdata.velc.x += d_epsxsph*pdata.xsph.x;
	pdata.velc.y += d_epsxsph*pdata.xsph.y;
	pdata.velc.z += d_epsxsph*pdata.xsph.z;
}

/// Integrate energy
/*! When internal energy integration is enabled
 */
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<EP::simflags & ENABLE_INTERNAL_ENERGY>
integrate_energy(EP const& params, P &pdata, int index, float dt)
{
	pdata.energy += dt*params.DEDt[pdata.index];
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<not (EP::simflags & ENABLE_INTERNAL_ENERGY)>
integrate_energy(EP const& params, P &pdata, int index, float dt)
{ /* do nothing */ }


/// Integrate the continuity equation
/*! In all formulations except for Grenier, this integrates the density.
 * For SPH_GRENIER it integrates the volume
 */
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<EP::sph_formulation != SPH_GRENIER>
continuity_integration(EP const& params, P &pdata, int index, float dt)
{
	pdata.vel.w += dt*pdata.force.w;
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<EP::sph_formulation == SPH_GRENIER>
continuity_integration(EP const& params, P &pdata, int index, float dt)
{
	pdata.vol.y += dt*pdata.force.w;
}


/// Integrate k and e in the \f$\kappa-\epsilon\f$ model
template<typename EP, typename P>
__device__ __forceinline__
//enable_if_t<EP::has_keps>
integrate_k_e(EP const& params, P &pdata, int index, float dt)
{
	const float3 dkde = params.keps_dkde[index];
	const float oldK = pdata.keps_k;
	// implicit formulations of k and e
	pdata.keps_k = (oldK + dt*dkde.x)/(1.0f + dt*pdata.keps_e/oldK);
	pdata.keps_e = (pdata.keps_e + dt*dkde.y)/(1.0f + dt*pdata.keps_e/oldK*dkde.z);
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<not EP::has_keps>
integrate_k_e(EP const& params, P &pdata, int index, float dt)
{ /* do nothing*/ }

/// Update the boundary elements normals, when using SA_BOUNDARY and moving bodies
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<(
	(EP::boundarytype == SA_BOUNDARY) &&
	(EP::simflags & ENABLE_MOVING_BODIES) &&
	!(EP::repacking)
)>
update_normals(EP const& params, P &pdata, int index)
{
	float4 normal = params.oldBoundElement[index];
	if (MOVING(pdata.info) && (BOUNDARY(pdata.info) || VERTEX(pdata.info))) {
		applyrot(&d_rbsteprot[9*object(pdata.info)], make_float3(normal), normal);
	}
	params.newBoundElement[index] = normal;
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<not (
	(EP::boundarytype == SA_BOUNDARY) &&
	(EP::simflags & ENABLE_MOVING_BODIES) &&
	 !(EP::repacking)
)>
update_normals(EP const& params, P &pdata, int index)
{ /* do nothing */ }

/// Integrate the boundary and vertex eulerian velocity in the k-epsilon case
template<typename EP, typename P>
__device__ __forceinline__
//enable_if_t<EP::has_keps>
integrate_eulerian_velocity(EP const& params, P &pdata, float dt)
{
	if (!IO_BOUNDARY(pdata.info) || (VERTEX(pdata.info) && CORNER(pdata.info))) {
		// this is for k-eps only. Normally forces are going to be zero
		pdata.eulerVel += dt*pdata.force;
	}
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<not EP::has_keps>
integrate_eulerian_velocity(EP const& params, P &pdata, float dt)
{ /* do nothing*/ }

/// Write volume (when present)
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<EP::sph_formulation == SPH_GRENIER>
write_volume(EP const& params, P &pdata, int index)
{
	pdata.vol.w = expf(pdata.vol.y)*pdata.vol.x;
	params.newVol[index] = pdata.vol;
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<EP::sph_formulation != SPH_GRENIER>
write_volume(EP const& params, P &pdata, int index)
{ /* do nothing*/ }

/// Write internal energy, if enabled
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<(EP::simflags & ENABLE_INTERNAL_ENERGY)>
write_energy(EP const& params, P &pdata, int index)
{
	params.newEnergy[index] = pdata.energy;
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<not (EP::simflags & ENABLE_INTERNAL_ENERGY)>
write_energy(EP const& params, P &pdata, int index)
{ /* do nothing*/ }


template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<EP::has_eulerVel>
write_eulerVel(EP const& params, P &pdata, int index)
{
	params.newEulerVel[index] = pdata.eulerVel;
}
template<typename EP, typename P>
__device__ __forceinline__
enable_if_t<not EP::has_eulerVel>
write_eulerVel(EP const& params, P &pdata, int index)
{ /* do nothing*/ }


/// A functor that helps to writes viscosity coefficient
/*! This is currently enabled only for KEPSILON, to write out k, e
 * and the turbulent viscosity
 */
template<typename EP, typename P>
__device__ __forceinline__
//enable_if_t<EP::has_keps>
write_viscosity_coeff(EP const& params, P &pdata, int index)
{
	params.newTKE[index] = pdata.keps_k;
	params.newEps[index] = pdata.keps_e;
	params.newTurbVisc[index] = 0.9f*pdata.keps_k*pdata.keps_k/pdata.keps_e;
}
template<typename EP, typename P>
__device__ __forceinline__
//enable_if_t<not EP::has_keps>
write_viscosity_coeff(EP const& params, P &pdata, int index)
{ /* do nothing*/ }

/* Euler kernel definitions */
// Predictor Corrector time integration
// - for step 1:
//	  v(n+1/2) = v(n) + f(n)*dt/2
//	  pos(n+1/2) = pos(n) + v(n)*dt/2
//
//	  We have oldVel = v(n), oldPos = pos(n), forces = f(n) so
//	  newVel = v(n+1/2) = oldVel + forces*dt/2
//	  newPos = pos(n+1/2) = oldPos + oldVel*dt/2
//
// - for step 2:
//	  vc(n+1/2) = v(n) + f(n+1/2)*dt/2
//	  posc(n+1/2) = pos(n) + vc(n+1/2)*dt/2
//	  then:
//	  v(n+1) = 2vc(n+1/2) - v(n) = v(n) + f(n+1/2)*dt
//	  pos(n+1) = 2posc(n+1/2) - pos(n) = pos(n) + vc(n+1/2)*dt
//
//	 Whe have oldVel = v(n), oldPos = pos(n), force = f(n+1/2),
//	  newVel = vel(n+1/2), newPos = pos(n+1/2) so
//	  we store velc = v(n) + f(n+1/2)*dt/2 then
//	  newPos = pos(n+1) = oldPos + velc*dt
//	  newVel = vel(n+1) = oldVel + forces*dt;

// Remember that for step 1 dt => dt/2 and for step 2 dt => dt !!!
// but dt2 is always equal to dt/2

/// Performs a basic Euler integration step
/*! Updates positions, velocities and other quantities of fluid partcles
 *  according to their previous values and derivatives :
 *  - for velocity \f$u(x, t + \Delta t) = u(x, t) + \Delta t.\frac{du}{dt}(x, t*)\f$
 *  - for positions \f$x(t + \Delta t) = x(t) + \Delta t.u_(x, t)\f$
 *	All other quantities are integrated like velocity.
 *
 *	The basic Euler step is called two times for the predictor corrector
 *	integration scheme (see tempalte param step) then \f$\Delta t\f$ and
 *	\f$t^*\f$ depends on the step.
 *
 *	The full description of the scheme is found in the IntegrationEngine
 *	documentation.
 *
 *	The velocities and positions of particles belonging to a floating or
 *	moving object are update according to a rigid body movement :
 *	- positions \f$x(t + \Delta t) = x(t) + t(t + \Delta t) + \Omega(t, t + \Delta t) \times (x(t) - x_C(t)\f$
 *	- velocity field  \f$u(x, t + \Delta  t) = v_l(t + \Delta t) + \frac{d\omega}{dt}(t + \Delta t)\times(x(t) - x_C(t)) \f$
 *	where :
 *	- \f$v_l\f$ is the linear velocity
 *	- \f$\frac{d\omega}{dt}\f$ the angular velocity
 *	- \f$t\f$ is the linear displacement
 *	- \f$\Omega(t, t + \Delta t)\f$ the rotation of the body between time
 *		\f$t\f$ an \f$t + \Delta t\f$
 *	- \f$C\f$ the center of rotation
 */
//TODO templatize vars like other kernels
template<typename EP, ///< euler_params template instantiation type
	KernelType kerneltype = EP::kerneltype,
	SPHFormulation sph_formulation = EP::sph_formulation,
	BoundaryType boundarytype = EP::boundarytype,
	//typename ViscSpec = typename EP::ViscSpec,
	flag_t simflags = EP::simflags,
	int step = EP::step>
__global__ void
eulerDevice(EP params)
{
	const int index = INTMUL(blockIdx.x,blockDim.x) + threadIdx.x;

	if (index >= params.numParticles)
		return;

	// this is dt or dt/2, depending on the integrator step
	const float dt = params.dt;

	euler_particle_data<EP> pdata(index, params);

	do {
		// Euler does nothing to boundary particles apart copying pos and vel
		// in the new arrays except :
		//		* when boundary part belongs to an object or a moving boundary, in
		//		  that case particle position and velocity is updated according to
		//		  the rigid body movement
		//		* with dynamic boundaries, in that case density of boundary parts is
		//		  also evolved
		//		* with SA boundaries and .....
		// TODO: complete previous comment
		const bool integrateBoundary = !(params.repacking) &&
			(boundarytype == DYN_BOUNDARY || boundarytype == SA_BOUNDARY);
		// TODO: fix for MOBILE and FLOATING boundaries with any type of bound type
		if (!ACTIVE(pdata.pos) || (pdata.ptype == PT_BOUNDARY && !integrateBoundary && !MOVING(pdata.info)) )
			break;

		// velc = vel if step == 1, but
		// velc = vel + forces[index]*dt/2.0f if step == 2
		// in the XSPH case we also add the mean velocity (pdata.xsph)
		compute_corrected_velocity(params, pdata);

		// Object index
		const int obj = object(pdata.info);

		// Updating particle position
		switch (pdata.ptype) {
			case PT_FLUID:
				// Add weighted mean_vel only in xsphcorr case.
				// The compiler is smart enough to optimize it out
				// in the xsphcorr == false case
				pdata.pos.x += pdata.velc.x*dt;
				pdata.pos.y += pdata.velc.y*dt;
				pdata.pos.z += pdata.velc.z*dt;

				// Grenier evolves the volume, not the density,
				// all other evolve the density directly.
				if (!params.repacking)
					continuity_integration(params, pdata, index, dt);

				as_float3(pdata.vel) += dt*as_float3(pdata.force);

				// updating internal energy
				integrate_energy(params, pdata, index, dt);
				
				//LUCIANO, COMMENT
				// Updating k and e for k-e model
				// if (!params.repacking)
					// integrate_k_e(params, pdata, index, dt);

				break;

		/* BOUNDARY and VERTEX particles behave in nearly the same way, so they are
		   handled in the same switch case (VERTEX particles are only preset in SA_BOUNDARY
		   case)
		 */
		case PT_VERTEX:
		case PT_BOUNDARY:

			// integration pos and vel for moving objects
			if (!params.repacking && MOVING(pdata.info)) {
				#ifdef _DEBUG_OBJ_FORCES_
				if (id(pinfo) == 0 && obj == 1 && d_rblinearvel[obj].x != 0.0) {
					printf("Euler device, object %d\n", obj);
					printf("   lvel: %e\t%e\t%e\n", d_rblinearvel[obj].x, d_rblinearvel[obj].y, d_rblinearvel[obj].z);
					printf("   avel: %e\t%e\t%e\n", d_rbangularvel[obj].x, d_rbangularvel[obj].y, d_rbangularvel[obj].z);
					printf("   gpos: %d\t%d\t%d\n", d_rbcgGridPos[obj].x, d_rbcgGridPos[obj].y, d_rbcgGridPos[obj].z);
					printf("   lpos: %e\t%e\t%e\n", d_rbcgPos[obj].x, d_rbcgPos[obj].y, d_rbcgPos[obj].z);
					printf("   trans:%e\t%e\t%e\n", d_rbtrans[obj].x, d_rbtrans[obj].y, d_rbtrans[obj].z);
					printf("   SR:   %e\t%e\t%e\n", d_rbsteprot[9*obj + 0], d_rbsteprot[9*obj + 1], d_rbsteprot[9*obj + 2]);
					printf("         %e\t%e\t%e\n", d_rbsteprot[9*obj + 3], d_rbsteprot[9*obj + 4], d_rbsteprot[9*obj + 5]);
					printf("         %e\t%e\t%e\n", d_rbsteprot[9*obj + 6], d_rbsteprot[9*obj + 7], d_rbsteprot[9*obj + 8]);
				}
				#endif

				// Applying rotation around center of gravity. We always have cg = cg(n). Cg behaves
				// the same as pos and we always have pos = pos(n).
				// relPos = x - x_cg
				const int3 gridPos = calcGridPosFromParticleHash(params.particleHash[index]);
				const float3 relPos = globalDistance(gridPos, as_float3(pdata.pos),
						d_rbcgGridPos[obj], d_rbcgPos[obj]);
				applyrot(&d_rbsteprot[9*obj], relPos, pdata.pos);

				// Applying center of gravity translation
				pdata.pos.x += d_rbtrans[obj].x;
				pdata.pos.y += d_rbtrans[obj].y;
				pdata.pos.z += d_rbtrans[obj].z;

				// Computing particles velocity
				// V(P) = V(Cg) + PCg^omega
				as_float3(pdata.vel) = d_rblinearvel[obj] + cross(d_rbangularvel[obj], relPos);
			}

			// DYN_BOUNDARY: integrate density and internal energy
			if (boundarytype == DYN_BOUNDARY) {
				continuity_integration(params, pdata, index, dt);
				integrate_energy(params, pdata, index, dt);
			}

			// integrate Eulerian velocity (for k-eps)
			integrate_eulerian_velocity(params, pdata, dt);

			break;

		case PT_TESTPOINT:
			/* TODO */
			break;
		}
	} while (0);

	params.newPos[index] = pdata.pos;
	params.newVel[index] = pdata.vel;
	write_energy(params, pdata, index);
	// the condition should just be “if the euler velocity is there”,
	// which is currently for KEPSILON or open boundaries, but we don't have an easy way
	// to check for struct membership, so let's do it by enumerating the cases
	// TODO FIXME
	if (!params.repacking) {
		write_volume(params, pdata, index);
		write_eulerVel(params, pdata, index);
		// LUCIANO> ONLY IF KEPSILON
		// write_viscosity_coeff(params, pdata, index);
		
		// update normal of boundary element, if using SA_BOUNDARY and we have moving bodies
		update_normals(params, pdata, index);
	}
}

/* vi:set ft=cuda: */
