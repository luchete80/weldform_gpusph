#!/usr/bin/python

"""
This script estimates the average inter-particle spacing _dp_ necessary
to achieve a target number of particles _T_.

The assumption is that the number of particle follows a rule in the form
_T(dp) = V(dp) + S(dp)_ where _V(dp)_ is the volumetric contribution,
which scales as _dp^3_ and _S(dp)_ is the surface contribution, which
scales as _dp^2_. More specifically, we assume that:

    V(dp) = KV/dp^3
    S(dp) = KS/dp^2

where _KV_ and _KS_ are problem-dependent constants. Assuming _KV_ and
_KS_ are known, we can then solve our target equation _T(dp) = T_ which
can be rewritten as

    T dp^3 - KS dp - KV = 0

or equivalently, in canonical form as the depressed cubic:

    dp^3 - KS/T dp = KV/T

To determine _KV_ and _KS_, we ask for two sampling, i.e. the number of
particles _T1_ and _T2_ generated by two dp settings (_dp1_ and _dp2_
respectively), so that _KV_ and _KS_ are determined from the linear
system

    T(dp1) = T1
    T(dp2) = T2

which, after some manipulation, is found to have the solutions:

                 dp2^2 T2 - dp1^2 T1
    KV = dp1 dp2 -------------------
                      dp1 - dp2

         dp1^3 T1 - dp2^3 T2
    KS = -------------------
              dp1 - dp2

"""

import sys
import os
from math import sqrt

def usage():
    print "%s dp1 T1 dp2 T2 T" % os.path.basename(sys.argv[0])

def cbrt(num):
    """Cube root _num_"""
    return num**(1.0/3)

def solve_depressed_cubic(p, q):
    """Solve the 'depressed cubic' x^3 + px = q"""

    R = q/2
    Q = p/3

    rad = R*R + Q*Q*Q

    w1 = cbrt(R+sqrt(rad))

    return w1 - p/(3*w1)

def compute_coefficients(dp1, T1, dp2, T2):
    """Compute _KV_ and _KS_ contributions from two samplings"""

    KV = dp1 * dp2 * ((dp2**2) * T2 - (dp1**2) * T1)/(dp1 - dp2)
    KS = ((dp1**3) * T1 - (dp2**3) * T2)/(dp1 - dp2)

    return {'V': KV, 'S': KS}

if len(sys.argv) < 5:
    usage()
    sys.exit(0)

dp1 = float(sys.argv[1])
T1  = float(sys.argv[2])

dp2 = float(sys.argv[3])
T2  = float(sys.argv[4])

T = float(sys.argv[5])

K = compute_coefficients(dp1, T1, dp2, T2)

print "KV=%g, KS=%g" % (K['V'], K['S'])

# Solve T x^3 - KS x - KV

w1 = solve_depressed_cubic(-K['S']/T, K['V']/T)

print "for T=%g use dp=%g" % (T, w1)
